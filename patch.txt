diff --git a/ldm/models/diffusion/ddim.py b/ldm/models/diffusion/ddim.py
index c6cfd57..ed2f118 100644
--- a/ldm/models/diffusion/ddim.py
+++ b/ldm/models/diffusion/ddim.py
@@ -9,7 +9,9 @@ from ldm.modules.diffusionmodules.util import make_ddim_sampling_parameters, mak
 
 class DDIMSampler(object):
     def __init__(self, model, schedule="linear", device=torch.device("cuda"), **kwargs):
+        print("DDIMSampler being created here")
         super().__init__()
+        print("DDIMSampler being created here")
         self.model = model
         self.ddpm_num_timesteps = model.num_timesteps
         self.schedule = schedule
@@ -76,6 +78,8 @@ class DDIMSampler(object):
                unconditional_conditioning=None, # this has to come in the same format as the conditioning, # e.g. as encoded tokens, ...
                dynamic_threshold=None,
                ucg_schedule=None,
+               target_index=-1,
+               original_batch_size=None,
                **kwargs
                ):
         if conditioning is not None:
@@ -95,6 +99,7 @@ class DDIMSampler(object):
                 if conditioning.shape[0] != batch_size:
                     print(f"Warning: Got {conditioning.shape[0]} conditionings but batch-size is {batch_size}")
 
+        print("Sampling here")
         self.make_schedule(ddim_num_steps=S, ddim_eta=eta, verbose=verbose)
         # sampling
         C, H, W = shape
@@ -116,7 +121,9 @@ class DDIMSampler(object):
                                                     unconditional_guidance_scale=unconditional_guidance_scale,
                                                     unconditional_conditioning=unconditional_conditioning,
                                                     dynamic_threshold=dynamic_threshold,
-                                                    ucg_schedule=ucg_schedule
+                                                    ucg_schedule=ucg_schedule,
+                                                    target_index=target_index,
+                                                    original_batch_size=original_batch_size,
                                                     )
         return samples, intermediates
 
@@ -127,11 +134,34 @@ class DDIMSampler(object):
                       mask=None, x0=None, img_callback=None, log_every_t=100,
                       temperature=1., noise_dropout=0., score_corrector=None, corrector_kwargs=None,
                       unconditional_guidance_scale=1., unconditional_conditioning=None, dynamic_threshold=None,
-                      ucg_schedule=None):
+                      ucg_schedule=None, target_index=-1, original_batch_size=None):
+        print("DDIM sampling")
         device = self.model.betas.device
         b = shape[0]
         if x_T is None:
-            img = torch.randn(shape, device=device)
+            # Generate noise for the entire batch as before if target_index is not specified
+            print("target shape {}".format(shape))
+            if target_index == -1:
+                print("target index not set")
+                img = torch.randn(shape, device=device)
+            # Generate noise for a specific image in the batch if batch size is 1
+            elif shape[0] == 1:
+                print("reproducing target image{}".format(shape))
+                if target_index >= original_batch_size:
+                    raise ValueError("target_index must be less than the original batch size")
+                # Generate noise for the entire batch and return only the noise for the specified index
+                size_list = list(shape) 
+                size_list[0] = original_batch_size 
+                new_shape = torch.Size(size_list)
+                print("original shape {}".format(new_shape))
+                print("current shape".format(img_tmp[target_index, :].unsqueeze(0).shape))
+                # Repeat noise for the entire batch but get only one image
+                img_tmp = torch.randn(new_shape, device=device)
+                return img_tmp[target_index, :].unsqueeze(0)
+            # Raise an error if target_index is specified and batch size is greater than 1
+            else:
+                raise ValueError("You cannot have target_index set when batch_size > 1")
+            
         else:
             img = x_T
 
@@ -167,7 +197,7 @@ class DDIMSampler(object):
                                       corrector_kwargs=corrector_kwargs,
                                       unconditional_guidance_scale=unconditional_guidance_scale,
                                       unconditional_conditioning=unconditional_conditioning,
-                                      dynamic_threshold=dynamic_threshold)
+                                      dynamic_threshold=dynamic_threshold, target_index=target_index,original_batch_size=original_batch_size)
             img, pred_x0 = outs
             if callback: callback(i)
             if img_callback: img_callback(pred_x0, i)
@@ -182,7 +212,7 @@ class DDIMSampler(object):
     def p_sample_ddim(self, x, c, t, index, repeat_noise=False, use_original_steps=False, quantize_denoised=False,
                       temperature=1., noise_dropout=0., score_corrector=None, corrector_kwargs=None,
                       unconditional_guidance_scale=1., unconditional_conditioning=None,
-                      dynamic_threshold=None):
+                      dynamic_threshold=None,target_index=-1,original_batch_size=None):
         b, *_, device = *x.shape, x.device
 
         if unconditional_conditioning is None or unconditional_guidance_scale == 1.:
@@ -245,7 +275,8 @@ class DDIMSampler(object):
 
         # direction pointing to x_t
         dir_xt = (1. - a_prev - sigma_t**2).sqrt() * e_t
-        noise = sigma_t * noise_like(x.shape, device, repeat_noise) * temperature
+        print("nois_like called here")
+        noise = sigma_t * noise_like(x.shape, device, repeat_noise, target_index=target_index, original_batch_size=original_batch_size) * temperature
         if noise_dropout > 0.:
             noise = torch.nn.functional.dropout(noise, p=noise_dropout)
         x_prev = a_prev.sqrt() * pred_x0 + dir_xt + noise
diff --git a/ldm/modules/diffusionmodules/util.py b/ldm/modules/diffusionmodules/util.py
index 637363d..6175124 100644
--- a/ldm/modules/diffusionmodules/util.py
+++ b/ldm/modules/diffusionmodules/util.py
@@ -264,7 +264,47 @@ class HybridConditioner(nn.Module):
         return {'c_concat': [c_concat], 'c_crossattn': [c_crossattn]}
 
 
-def noise_like(shape, device, repeat=False):
-    repeat_noise = lambda: torch.randn((1, *shape[1:]), device=device).repeat(shape[0], *((1,) * (len(shape) - 1)))
-    noise = lambda: torch.randn(shape, device=device)
-    return repeat_noise() if repeat else noise()
\ No newline at end of file
+def noise_like(shape, device, repeat=False, target_index=-1, original_batch_size=None):
+    """
+    Generates noise of a given shape with a specified device.
+
+    Args:
+        shape (tuple): The shape of the noise tensor.
+        device (torch.device): The device on which to generate the noise tensor.
+        repeat (bool): Whether to repeat the same noise across the batch dimension.
+        target_index (int): The index of the image in the batch for which to generate noise. Default: -1 (generate noise for the entire batch).
+        original_batch_size (int): The original batch size before sampling from DDIM. This argument is only used if target_index is specified and batch size is 1. Default: None.
+
+    Returns:
+        torch.Tensor: The generated noise tensor.
+
+    Raises:
+        ValueError: If target_index is specified and batch size is greater than 1.
+        ValueError: If target_index is greater than or equal to the batch size.
+    """
+
+    # Generate noise for the entire batch as before if target_index is not specified
+    if target_index == -1:
+        repeat_noise = lambda: torch.randn((1, *shape[1:]), device=device).repeat(shape[0], *((1,) * (len(shape) - 1)))
+        noise = lambda: torch.randn(shape, device=device)
+        return repeat_noise() if repeat else noise()
+
+    # Generate noise for a specific image in the batch if batch size is 1
+    elif shape[0] == 1:
+        # Repeat noise for the entire batch but generate separate noise for each image
+        repeat_noise = lambda: torch.randn((1, *shape[1:]), device=device).repeat(original_batch_size, *((1,) * (len(shape) - 1)))
+
+        # Generate noise for the entire batch and return only the noise for the specified index
+        size_list = list(shape)  # convert to list
+        size_list[0] = original_batch_size  # change the first dimension to 6
+        new_shape = torch.Size(size_list)  # create a new torch.Size object with the updated list
+        noise = lambda: torch.randn(new_shape, device=device)
+        if target_index >= original_batch_size:
+            raise ValueError("target_index must be less than the original batch size")
+        return noise()[target_index, :].unsqueeze(0)
+
+    # Raise an error if target_index is specified and batch size is greater than 1
+    else:
+        raise ValueError("You cannot have target_index set when batch_size > 1")
+    
+    
\ No newline at end of file
diff --git a/scripts/txt2img.py b/scripts/txt2img.py
index 9d955e3..a011de7 100644
--- a/scripts/txt2img.py
+++ b/scripts/txt2img.py
@@ -13,11 +13,18 @@ from torch import autocast
 from contextlib import nullcontext
 from imwatermark import WatermarkEncoder
 
+import sys
+sys.path.insert(0, '/cache/flo_398494/stablediffusion/')
 from ldm.util import instantiate_from_config
 from ldm.models.diffusion.ddim import DDIMSampler
 from ldm.models.diffusion.plms import PLMSSampler
 from ldm.models.diffusion.dpm_solver import DPMSolverSampler
 
+import inspect
+
+sampler_source_file = inspect.getsourcefile(DDIMSampler)
+print(sampler_source_file)
+
 torch.set_grad_enabled(False)
 
 def chunk(it, size):
@@ -199,6 +206,22 @@ def parse_args():
         action='store_true',
         help="Use bfloat16",
     )
+    parser.add_argument(
+        '--original_batch_size',
+        type=int,
+        default=None,
+        help='Original batch size before sampling from DDIM'
+    )
+    parser.add_argument(
+        '--target_index',
+        type=int,
+        default=-1,
+        help='Index of the image in the batch for which to generate noise. Default: -1 (generate noise for the entire batch)'
+    )
+
+
+
+    
     opt = parser.parse_args()
     return opt
 
@@ -219,10 +242,13 @@ def main(opt):
     model = load_model_from_config(config, f"{opt.ckpt}", device)
 
     if opt.plms:
+        print("PLMSSampler")
         sampler = PLMSSampler(model, device=device)
     elif opt.dpm:
+        print("DPMSolverSampler")
         sampler = DPMSolverSampler(model, device=device)
     else:
+        print("DDIMSampler2")
         sampler = DDIMSampler(model, device=device)
 
     os.makedirs(opt.outdir, exist_ok=True)
@@ -352,7 +378,9 @@ def main(opt):
                                                      unconditional_guidance_scale=opt.scale,
                                                      unconditional_conditioning=uc,
                                                      eta=opt.ddim_eta,
-                                                     x_T=start_code)
+                                                     x_T=start_code,
+                                                     target_index=opt.target_index,
+                                                     original_batch_size=opt.original_batch_size)
 
                     x_samples = model.decode_first_stage(samples)
                     x_samples = torch.clamp((x_samples + 1.0) / 2.0, min=0.0, max=1.0)
